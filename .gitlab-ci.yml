# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: gradle:8-jdk17-alpine

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - package
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

compile-code:
  stage: build
  script:
    - echo 'Attempting to compile the code...'
    - gradle -Dorg.gradle.welcome=never --no-daemon compileJava
    # - echo 'Copying image files...'
    # - mkdir -p build/resources/main/images  # Create directory for images
    # - cp src/cosc202/andie/*.png build/resources/main/images/  # Copy image files
    - echo 'Done.'
  artifacts:
    paths:
    - build

unit-test-job:   # This job runs in the test stage.
  tags:
    - docker
  image: eclipse-temurin:17
  stage: test
  script:
    - echo "Attemting to run unit test..."
    - chmod u+x gradlew
    - ./gradlew test


lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

create-jar:
    stage: package
    script:
      - echo 'Attempting to create JAR file...'
      - gradle -Dorg.gradle.welcome=never --no-daemon jar
      - echo 'Done.'
    artifacts:
      paths:
          - build/libs/andie.jar

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

pages: # publish Javadoc website
  tags:
    - docker
  image: eclipse-temurin:17
  stage: build
  script:
    - javadoc -d docs src/cosc202/andie/*.java
    - mkdir public
    - echo 'test' >public/test.txt
    - mv docs public/
    - ls -R public | head
    - echo 'first ten public/ files listed'
  artifacts:
    paths:
      - public
  only:
  - main
